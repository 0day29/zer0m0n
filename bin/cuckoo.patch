diff -rupN original/analyzer/windows/analyzer.py new/analyzer/windows/analyzer.py
--- original/analyzer/windows/analyzer.py	2014-01-09 15:47:54.000000000 +0100
+++ new/analyzer/windows/analyzer.py	2014-01-31 21:43:44.775508446 +0100
@@ -221,6 +221,26 @@ class PipeHandler(Thread):
                 else:
                     response = hookdll_encode(url_dlls)
 
+            # same than below but we don't want to inject any DLLs because
+            # it's a kernel analysis
+            elif command.startswith("KPROCESS:"):
+                PROCESS_LOCK.acquire()
+                data = command[9:]
+                process_id = int(data)
+                thread_id = None
+                if process_id:
+                    if process_id not in (PID, PPID):
+                        if process_id not in PROCESS_LIST:
+                            proc = Process(pid=process_id,thread_id=thread_id)
+                            filepath = proc.get_filepath()
+                            filename = os.path.basename(filepath)
+
+                            if not protected_filename(filename):
+                                add_pids(process_id)
+                                log.info("Announce process name : %s", filename)
+                PROCESS_LOCK.release()                
+
+
             # In case of PID, the client is trying to notify the creation of
             # a new process to be injected and monitored.
             elif command.startswith("PROCESS:"):
diff -rupN original/analyzer/windows/lib/api/process.py new/analyzer/windows/lib/api/process.py
--- original/analyzer/windows/lib/api/process.py	2014-01-09 15:47:54.000000000 +0100
+++ new/analyzer/windows/lib/api/process.py	2014-01-31 21:43:44.878841780 +0100
@@ -5,6 +5,8 @@
 import os
 import logging
 import random
+import win32file
+import win32api
 from time import time
 from ctypes import byref, c_ulong, create_string_buffer, c_int, sizeof
 from shutil import copy
@@ -21,6 +23,9 @@ from lib.common.rand import random_strin
 from lib.common.results import NetlogFile
 from lib.core.config import Config
 
+IOCTL_PID = 0x222008
+PATH_KERNEL_DRIVER = "\\\\.\\DriverSSDT"
+
 log = logging.getLogger(__name__)
 
 def randomize_dll(dll_path):
@@ -174,7 +179,7 @@ class Process:
 
         return None
 
-    def execute(self, path, args=None, suspended=False):
+    def execute(self, path, args=None, suspended=False, kernel_analysis=False):
         """Execute sample process.
         @param path: sample path.
         @param args: process args.
@@ -218,6 +223,79 @@ class Process:
             self.h_thread = process_info.hThread
             log.info("Successfully executed process from path \"%s\" with "
                      "arguments \"%s\" with pid %d", path, args, self.pid)
+	    
+            """ send pid to kernel driver """
+            if kernel_analysis == True:
+                log.info("Starting kernel analysis")
+                log.info("Installing driver")
+                sys_file = os.path.join(os.getcwd(), "dll", "zer0m0n.sys")
+                exe_file = os.path.join(os.getcwd(), "dll", "logs_dispatcher.exe")
+                if not sys_file or not exe_file or not os.path.exists(sys_file) or not os.path.exists(exe_file):
+                        log.warning("No valid zer0m0n files to be used for process with pid %d, injection aborted", self.pid)
+                        return False
+                
+                exe_name = random_string(6)
+                service_name = random_string(6)
+                driver_name = random_string(6)
+                inf_data = '[Version]\r\nSignature = "$Windows NT$"\r\nClass = "ActivityMonitor"\r\nClassGuid = {b86dff51-a31e-4bac-b3cf-e8cfe75c9fc2}\r\nProvider= %Prov%\r\nDriverVer = 22/01/2014,1.0.0.0\r\nCatalogFile = %DriverName%.cat\r\n[DestinationDirs]\r\nDefaultDestDir = 12\r\nMiniFilter.DriverFiles = 12\r\n[DefaultInstall]\r\nOptionDesc = %ServiceDescription%\r\nCopyFiles = MiniFilter.DriverFiles\r\n[DefaultInstall.Services]\r\nAddService = %ServiceName%,,MiniFilter.Service\r\n[DefaultUninstall]\r\nDelFiles = MiniFilter.DriverFiles\r\n[DefaultUninstall.Services]\r\nDelService = %ServiceName%,0x200\r\n[MiniFilter.Service]\r\nDisplayName= %ServiceName%\r\nDescription= %ServiceDescription%\r\nServiceBinary= %12%\\%DriverName%.sys\r\nDependencies = "FltMgr"\r\nServiceType = 2\r\nStartType = 3\r\nErrorControl = 1\r\nLoadOrderGroup = "FSFilter Activity Monitor"\r\nAddReg = MiniFilter.AddRegistry\r\n[MiniFilter.AddRegistry]\r\nHKR,,"DebugFlags",0x00010001 ,0x0\r\nHKR,"Instances","DefaultInstance",0x00000000,%DefaultInstance%\r\nHKR,"Instances\\"%Instance1.Name%,"Altitude",0x00000000,%Instance1.Altitude%\r\nHKR,"Instances\\"%Instance1.Name%,"Flags",0x00010001,%Instance1.Flags%\r\n[MiniFilter.DriverFiles]\r\n%DriverName%.sys\r\n[SourceDisksFiles]\r\n'+driver_name+'.sys = 1,,\r\n[SourceDisksNames]\r\n1 = %DiskId1%,,,\r\n[Strings]\r\n'+'Prov = "'+random_string(8)+'"\r\nServiceDescription = "'+random_string(12)+'"\r\nServiceName = "'+service_name+'"\r\nDriverName = "'+driver_name+'"\r\nDiskId1 = "'+service_name+' Device Installation Disk"\r\nDefaultInstance = "'+service_name+' Instance"\r\nInstance1.Name = "'+service_name+' Instance"\r\nInstance1.Altitude = "370050"\r\nInstance1.Flags = 0x0'
+                
+                new_inf = os.path.join(os.getcwd(), "dll", "{0}.inf".format(service_name))
+                new_sys = os.path.join(os.getcwd(), "dll", "{0}.sys".format(driver_name))
+                copy(sys_file, new_sys)
+                new_exe = os.path.join(os.getcwd(), "dll", "{0}.exe".format(exe_name))
+                copy(exe_file, new_exe)
+                log.info("[-] Driver name : "+new_sys)
+                log.info("[-] Inf name : "+new_inf)
+                log.info("[-] Application name : "+new_exe)
+                log.info("[-] Service : "+service_name)
+                
+                fh = open(new_inf,"w")
+                fh.write(inf_data)
+                fh.close()
+                
+                os.system("rundll32 setupapi.dll, InstallHinfSection DefaultInstall 132 "+new_inf)
+                os.system("net start "+service_name)
+                
+                si = STARTUPINFO()
+                si.cb = sizeof(startup_info)
+                pi = PROCESS_INFORMATION()
+                cr = CREATE_NEW_CONSOLE 
+                
+                log.info("Starting "+exe_name+".exe")
+                ldp = KERNEL32.CreateProcessA(new_exe,
+                                              None,
+                                              None,
+                                              None,
+                                              None,
+                                              cr,
+                                              None,
+                                              os.getenv("TEMP"),
+                                              byref(si),
+                                              byref(pi))
+                if not ldp:
+                    log.error("Failed starting "+exe_name+".exe.")
+                    return False
+		
+                config_path = os.path.join(os.getenv("TEMP"), "%s.ini" % self.pid)
+                with open(config_path, "w") as config:
+                    cfg = Config("analysis.conf")
+
+                    config.write("host-ip={0}\n".format(cfg.ip))
+                    config.write("host-port={0}\n".format(cfg.port))
+                    config.write("pipe={0}\n".format(PIPE))
+                
+                log.info("Sending startup information")
+                hFile = win32file.CreateFile(PATH_KERNEL_DRIVER, win32file.GENERIC_READ|win32file.GENERIC_WRITE,
+                                         0, None, win32file.OPEN_EXISTING, 0, None)
+                if hFile:
+                    p = Process(pid=os.getpid())
+                    ppid = p.get_parent_pid()
+                    msg = str(self.pid)+"_"+str(os.getpid())+"_"+str(ppid)+"_"+str(pi.dwProcessId)+'\0'
+                    win32file.DeviceIoControl(hFile, IOCTL_PID, msg, None)
+                else:
+                    log.warning("Failed to access kernel driver")
+            
+            
             return True
         else:
             log.error("Failed to execute process from path \"%s\" with "
@@ -316,10 +394,10 @@ class Process:
 
             # The first time we come up with a random startup-time.
             if Process.first_process:
-                # This adds 1 up to 30 times of 20 minutes to the startup
-                # time of the process, therefore bypassing anti-vm checks
-                # which check whether the VM has only been up for <10 minutes.
-                Process.startup_time = random.randint(1, 30) * 20 * 60 * 1000
+               # This adds 1 up to 30 times of 20 minutes to the startup
+               # time of the process, therefore bypassing anti-vm checks
+               # which check whether the VM has only been up for <10 minutes.
+               Process.startup_time = random.randint(1, 30) * 20 * 60 * 1000
 
             config.write("host-ip={0}\n".format(cfg.ip))
             config.write("host-port={0}\n".format(cfg.port))
@@ -372,7 +450,7 @@ class Process:
                 return False
             else:
                 KERNEL32.CloseHandle(thread_handle)
-
+            
         return True
 
     def wait(self):
diff -rupN original/analyzer/windows/modules/packages/applet.py new/analyzer/windows/modules/packages/applet.py
--- original/analyzer/windows/modules/packages/applet.py	2014-01-09 15:47:54.000000000 +0100
+++ new/analyzer/windows/modules/packages/applet.py	2014-01-31 21:43:44.852175113 +0100
@@ -50,6 +50,9 @@ class Applet(Package):
         dll = self.options.get("dll", None)
         free = self.options.get("free", False)
         class_name = self.options.get("class", None)
+        kernel_analysis = self.options.get("kernel_analysis", False)
+        if kernel_analysis != False:
+            kernel_analysis = True
         suspended = True
         if free:
             suspended = False
@@ -57,11 +60,13 @@ class Applet(Package):
         html_path = self.make_html(path, class_name)
 
         p = Process()
-        if not p.execute(path=browser, args="\"%s\"" % html_path, suspended=suspended):
+        if not p.execute(path=browser, args="\"%s\"" % html_path, suspended=suspended,kernel_analysis=kernel_analysis):
             raise CuckooPackageError("Unable to execute initial Internet "
                                      "Explorer process, analysis aborted")
 
         if not free and suspended:
+            if not kernel_analysis:
+                p.inject(dll)
             p.inject(dll)
             p.resume()
             return p.pid
diff -rupN original/analyzer/windows/modules/packages/bin.py new/analyzer/windows/modules/packages/bin.py
--- original/analyzer/windows/modules/packages/bin.py	2014-01-09 15:47:54.000000000 +0100
+++ new/analyzer/windows/modules/packages/bin.py	2014-01-31 21:43:44.852175113 +0100
@@ -11,8 +11,12 @@ class Shellcode(Package):
     def start(self, path):
         p = Process()
         dll = self.options.get("dll")
-        p.execute(path="bin/execsc.exe", args=path, suspended=True)
-        p.inject(dll)
+        kernel_analysis = self.options.get("kernel_analysis", False)
+        if kernel_analysis != False:
+            kernel_analysis = True
+        p.execute(path="bin/execsc.exe", args=path, suspended=True,kernel_analysis=kernel_analysis)
+        if not kernel_analysis:
+            p.inject(dll)
         p.resume()
 
         return p.pid
diff -rupN original/analyzer/windows/modules/packages/cpl.py new/analyzer/windows/modules/packages/cpl.py
--- original/analyzer/windows/modules/packages/cpl.py	2014-01-09 15:47:54.000000000 +0100
+++ new/analyzer/windows/modules/packages/cpl.py	2014-01-31 21:43:44.852175113 +0100
@@ -26,18 +26,22 @@ class CPL(Package):
 
         dll = self.options.get("dll", None)
         free = self.options.get("free", False)
+        kernel_analysis = self.options.get("kernel_analysis", False)
+        if kernel_analysis != False:
+            kernel_analysis = True
         suspended = True
         if free:
             suspended = False
 
         p = Process()
         if not p.execute(path=control, args="\"%s\"" % path,
-                         suspended=suspended):
+                         suspended=suspended,kernel_analysis=kernel_analysis):
             raise CuckooPackageError("Unable to execute initial Control "
                                      "process, analysis aborted")
 
         if not free and suspended:
-            p.inject(dll)
+            if not kernel_analysis:
+                p.inject(dll)
             p.resume()
             return p.pid
         else:
diff -rupN original/analyzer/windows/modules/packages/dll.py new/analyzer/windows/modules/packages/dll.py
--- original/analyzer/windows/modules/packages/dll.py	2014-01-09 15:47:54.000000000 +0100
+++ new/analyzer/windows/modules/packages/dll.py	2014-01-31 21:43:44.852175113 +0100
@@ -14,6 +14,9 @@ class Dll(Package):
         function = self.options.get("function", "DllMain")
         arguments = self.options.get("arguments", None)
         dll = self.options.get("dll", None)
+        kernel_analysis = self.options.get("kernel_analysis", False)
+        if kernel_analysis != False:
+            kernel_analysis = True
         suspended = True
         if free:
             suspended = False
@@ -23,12 +26,13 @@ class Dll(Package):
             args += " {0}".format(arguments)
 
         p = Process()
-        if not p.execute(path="C:\\WINDOWS\\system32\\rundll32.exe", args=args, suspended=suspended):
+        if not p.execute(path="C:\\WINDOWS\\system32\\rundll32.exe", args=args, suspended=suspended, kernel_analysis=kernel_analysis):
             raise CuckooPackageError("Unable to execute rundll32, "
                                      "analysis aborted")
 
         if not free and suspended:
-            p.inject(dll)
+            if not kernel_analysis:
+                p.inject(dll)
             p.resume()
             return p.pid
         else:
diff -rupN original/analyzer/windows/modules/packages/doc.py new/analyzer/windows/modules/packages/doc.py
--- original/analyzer/windows/modules/packages/doc.py	2014-01-09 15:47:54.000000000 +0100
+++ new/analyzer/windows/modules/packages/doc.py	2014-01-31 21:43:44.852175113 +0100
@@ -37,17 +37,22 @@ class DOC(Package):
 
         dll = self.options.get("dll", None)
         free = self.options.get("free", False)
+        kernel_analysis = self.options.get("kernel_analysis", False)
+        if kernel_analysis != False:
+            kernel_analysis = True
+
         suspended = True
         if free:
             suspended = False
 
         p = Process()
-        if not p.execute(path=word, args="\"%s\"" % path, suspended=suspended):
+        if not p.execute(path=word, args="\"%s\"" % path, suspended=suspended, kernel_analysis=kernel_analysis):
             raise CuckooPackageError("Unable to execute initial Microsoft "
                                      "Office Word process, analysis aborted")
 
         if not free and suspended:
-            p.inject(dll)
+            if not kernel_analysis:
+                p.inject(dll)
             p.resume()
             return p.pid
         else:
diff -rupN original/analyzer/windows/modules/packages/exe.py new/analyzer/windows/modules/packages/exe.py
--- original/analyzer/windows/modules/packages/exe.py	2014-01-09 15:47:54.000000000 +0100
+++ new/analyzer/windows/modules/packages/exe.py	2014-01-31 21:43:44.852175113 +0100
@@ -13,17 +13,21 @@ class Exe(Package):
         free = self.options.get("free", False)
         args = self.options.get("arguments", None)
         dll = self.options.get("dll", None)
+        kernel_analysis = self.options.get("kernel_analysis", False)
+        if kernel_analysis != False:
+            kernel_analysis = True
         suspended = True
         if free:
             suspended = False
 
         p = Process()
-        if not p.execute(path=path, args=args, suspended=suspended):
+        if not p.execute(path=path, args=args, suspended=suspended, kernel_analysis=kernel_analysis):
             raise CuckooPackageError("Unable to execute initial process, "
                                      "analysis aborted")
 
         if not free and suspended:
-            p.inject(dll)
+            if not kernel_analysis:
+                p.inject(dll)
             p.resume()
             p.close()
             return p.pid
diff -rupN original/analyzer/windows/modules/packages/generic.py new/analyzer/windows/modules/packages/generic.py
--- original/analyzer/windows/modules/packages/generic.py	2014-01-09 15:47:54.000000000 +0100
+++ new/analyzer/windows/modules/packages/generic.py	2014-01-31 21:43:44.852175113 +0100
@@ -14,6 +14,9 @@ class Genric(Package):
     def start(self, path):
         free = self.options.get("free", False)
         dll = self.options.get("dll", None)
+        kernel_analysis = self.options.get("kernel_analysis", False)
+        if kernel_analysis != False:
+            kernel_analysis = True
         suspended = True
         if free:
             suspended = False
@@ -22,12 +25,13 @@ class Genric(Package):
         cmd_args = "/c start \"{0}\"".format(path)
 
         p = Process()
-        if not p.execute(path=cmd_path, args=cmd_args, suspended=suspended):
+        if not p.execute(path=cmd_path, args=cmd_args, suspended=suspended, kernel_analysis=kernel_analysis):
             raise CuckooPackageError("Unable to execute initial process, "
                                      "analysis aborted")
 
         if not free and suspended:
-            p.inject(dll)
+            if not kernel_analysis:
+                p.inject(dll)
             p.resume()
             p.close()
             return p.pid
diff -rupN original/analyzer/windows/modules/packages/html.py new/analyzer/windows/modules/packages/html.py
--- original/analyzer/windows/modules/packages/html.py	2014-01-09 15:47:54.000000000 +0100
+++ new/analyzer/windows/modules/packages/html.py	2014-01-31 21:43:44.852175113 +0100
@@ -14,6 +14,9 @@ class HTML(Package):
     def start(self, path):
         free = self.options.get("free", False)
         dll = self.options.get("dll", None)
+        kernel_analysis = self.options.get("kernel_analysis", False)
+        if kernel_analysis != False:
+            kernel_analysis = True
         suspended = True
         if free:
             suspended = False
@@ -21,12 +24,13 @@ class HTML(Package):
         iexplore = os.path.join(os.getenv("ProgramFiles"), "Internet Explorer", "iexplore.exe")
 
         p = Process()
-        if not p.execute(path=iexplore, args="\"%s\"" % path, suspended=suspended):
+        if not p.execute(path=iexplore, args="\"%s\"" % path, suspended=suspended, kernel_analysis=kernel_analysis):
             raise CuckooPackageError("Unable to execute initial Internet "
                                      "Explorer process, analysis aborted")
 
         if not free and suspended:
-            p.inject(dll)
+            if not kernel_analysis:
+                p.inject(dll)
             p.resume()
             return p.pid
         else:
diff -rupN original/analyzer/windows/modules/packages/ie.py new/analyzer/windows/modules/packages/ie.py
--- original/analyzer/windows/modules/packages/ie.py	2014-01-09 15:47:54.000000000 +0100
+++ new/analyzer/windows/modules/packages/ie.py	2014-01-31 21:43:44.855508445 +0100
@@ -15,6 +15,9 @@ class IE(Package):
     def start(self, url):
         free = self.options.get("free", False)
         dll = self.options.get("dll", None)
+        kernel_analysis = self.options.get("kernel_analysis", False)
+        if kernel_analysis != False:
+            kernel_analysis = True
         suspended = True
         if free:
             suspended = False
@@ -22,12 +25,13 @@ class IE(Package):
         iexplore = os.path.join(os.getenv("ProgramFiles"), "Internet Explorer", "iexplore.exe")
 
         p = Process()
-        if not p.execute(path=iexplore, args="\"%s\"" % url, suspended=suspended):
+        if not p.execute(path=iexplore, args="\"%s\"" % url, suspended=suspended, kernel_analysis=kernel_analysis):
             raise CuckooPackageError("Unable to execute initial Internet "
                                      "Explorer process, analysis aborted")
 
         if not free and suspended:
-            p.inject(dll)
+            if not kernel_analysis:
+                p.inject(dll)
             p.resume()
             return p.pid
         else:
diff -rupN original/analyzer/windows/modules/packages/jar.py new/analyzer/windows/modules/packages/jar.py
--- original/analyzer/windows/modules/packages/jar.py	2014-01-09 15:47:54.000000000 +0100
+++ new/analyzer/windows/modules/packages/jar.py	2014-01-31 21:43:44.852175113 +0100
@@ -33,6 +33,9 @@ class Jar(Package):
         dll = self.options.get("dll", None)
         free = self.options.get("free", False)
         class_path = self.options.get("class", None)
+        kernel_analysis = self.options.get("kernel_analysis", False)
+        if kernel_analysis != False:
+            kernel_analysis = True
         suspended = True
         if free:
             suspended = False
@@ -43,12 +46,13 @@ class Jar(Package):
             args = "-jar \"%s\"" % path
 
         p = Process()
-        if not p.execute(path=java, args=args, suspended=suspended):
+        if not p.execute(path=java, args=args, suspended=suspended, kernel_analysis=kernel_analysis):
             raise CuckooPackageError("Unable to execute initial Java "
                                      "process, analysis aborted")
 
         if not free and suspended:
-            p.inject(dll)
+            if not kernel_analysis:
+                p.inject(dll)
             p.resume()
             return p.pid
         else:
diff -rupN original/analyzer/windows/modules/packages/pdf.py new/analyzer/windows/modules/packages/pdf.py
--- original/analyzer/windows/modules/packages/pdf.py	2014-01-09 15:47:54.000000000 +0100
+++ new/analyzer/windows/modules/packages/pdf.py	2014-01-31 21:43:44.855508445 +0100
@@ -34,17 +34,21 @@ class PDF(Package):
 
         dll = self.options.get("dll", None)
         free = self.options.get("free", False)
+        kernel_analysis = self.options.get("kernel_analysis", False)
+        if kernel_analysis != False:
+            kernel_analysis = True
         suspended = True
         if free:
             suspended = False
 
         p = Process()
-        if not p.execute(path=reader, args="\"%s\"" % path, suspended=suspended):
+        if not p.execute(path=reader, args="\"%s\"" % path, suspended=suspended, kernel_analysis=kernel_analysis):
             raise CuckooPackageError("Unable to execute initial Adobe Reader "
                                      "process, analysis aborted")
 
         if not free and suspended:
-            p.inject(dll)
+            if not kernel_analysis:
+                p.inject(dll)
             p.resume()
             return p.pid
         else:
diff -rupN original/analyzer/windows/modules/packages/vbs.py new/analyzer/windows/modules/packages/vbs.py
--- original/analyzer/windows/modules/packages/vbs.py	2014-01-09 15:47:54.000000000 +0100
+++ new/analyzer/windows/modules/packages/vbs.py	2014-01-31 21:43:44.855508445 +0100
@@ -33,17 +33,21 @@ class VBS(Package):
 
         dll = self.options.get("dll", None)
         free = self.options.get("free", False)
+        kernel_analysis = self.options.get("kernel_analysis", False)
+        if kernel_analysis != False:
+            kernel_analysis = True
         suspended = True
         if free:
             suspended = False
 
         p = Process()
-        if not p.execute(path=wscript, args="\"{0}\"".format(path), suspended=suspended):
+        if not p.execute(path=wscript, args="\"{0}\"".format(path), suspended=suspended, kernel_analysis=kernel_analysis):
             raise CuckooPackageError("Unable to execute initial WScript "
                                      "process, analysis aborted")
 
         if not free and suspended:
-            p.inject(dll)
+            if not kernel_analysis:
+                p.inject(dll)
             p.resume()
             return p.pid
         else:
diff -rupN original/analyzer/windows/modules/packages/xls.py new/analyzer/windows/modules/packages/xls.py
--- original/analyzer/windows/modules/packages/xls.py	2014-01-09 15:47:54.000000000 +0100
+++ new/analyzer/windows/modules/packages/xls.py	2014-01-31 21:43:44.855508445 +0100
@@ -36,17 +36,21 @@ class XLS(Package):
 
         dll = self.options.get("dll", None)
         free = self.options.get("free", False)
+        kernel_analysis = self.options.get("kernel_analysis", False)
+        if kernel_analysis != False:
+            kernel_analysis = True
         suspended = True
         if free:
             suspended = False
 
         p = Process()
-        if not p.execute(path=excel, args="\"%s\"" % path, suspended=suspended):
+        if not p.execute(path=excel, args="\"%s\"" % path, suspended=suspended, kernel_analysis=kernel_analysis):
             raise CuckooPackageError("Unable to execute initial Microsoft "
                                      "Office Excel process, analysis aborted")
 
         if not free and suspended:
-            p.inject(dll)
+            if not kernel_analysis:
+                p.inject(dll)
             p.resume()
             return p.pid
         else:
diff -rupN original/analyzer/windows/modules/packages/zip.py new/analyzer/windows/modules/packages/zip.py
--- original/analyzer/windows/modules/packages/zip.py	2014-01-09 15:47:54.000000000 +0100
+++ new/analyzer/windows/modules/packages/zip.py	2014-01-31 21:43:44.852175113 +0100
@@ -43,17 +43,21 @@ class Zip(Package):
         dll = self.options.get("dll", None)
         free = self.options.get("free", False)
         args = self.options.get("arguments", None)
+        kernel_analysis = self.options.get("kernel_analysis", False)
+        if kernel_analysis != False:
+            kernel_analysis = True
         suspended = True
         if free:
             suspended = False
 
         p = Process()
-        if not p.execute(path=file_path, args=args, suspended=suspended):
+        if not p.execute(path=file_path, args=args, suspended=suspended, kernel_analysis=kernel_analysis):
             raise CuckooPackageError("Unable to execute initial process, "
                                      "analysis aborted")
 
         if not free and suspended:
-            p.inject(dll)
+            if not kernel_analysis:
+                p.inject(dll)
             p.resume()
             return p.pid
         else:
diff -rupN original/lib/cuckoo/common/logtbl.py new/lib/cuckoo/common/logtbl.py
--- original/lib/cuckoo/common/logtbl.py	2014-01-09 15:47:54.000000000 +0100
+++ new/lib/cuckoo/common/logtbl.py	2014-01-31 21:43:45.212175113 +0100
@@ -1,4 +1,4 @@
-# Copyright (C) 2010-2014 Cuckoo Sandbox Developers.
+	# Copyright (C) 2010-2013 Cuckoo Sandbox Developers.
 # This file is part of Cuckoo Sandbox - http://www.cuckoosandbox.org
 # See the file 'docs/LICENSE' for copying permission.
 
@@ -193,4 +193,38 @@ table = [
     ("ZwMapViewOfSection", "process", ("ppPp", "SectionHandle", "ProcessHandle", "BaseAddress", "SectionOffset")),
     ("GetSystemMetrics", "misc", ("l", "SystemMetricIndex")),
     ("GetCursorPos", "misc", ("ll", "x", "y")),
+	("REGISTRY_OPEN_KEY", "registry", ("s", "SubKey")),
+	("REGISTRY_DELETE_KEY", "registry", ("s", "SubKey")),
+	("REGISTRY_VALUE_KEY_SET", "registry", ("sss", "SubKey", "ValueName", "Data")),
+	("REGISTRY_VALUE_KEY_DELETE", "registry", ("ss", "SubKey", "ValueName")),
+	("REGISTRY_KEY_RENAME", "registry", ("ss", "SubKey", "NewName")),
+	("REGISTRY_ENUMERATE_KEY", "registry", ("s", "SubKey")),
+	("REGISTRY_ENUMERATE_VALUE_KEY", "registry", ("s", "SubKey")),
+	("REGISTRY_QUERY_KEY", "registry", ("s", "SubKey")),
+	("REGISTRY_QUERY_VALUE_KEY", "registry", ("ss", "SubKey", "ValueName")),
+	("REGISTRY_CREATE_KEY", "registry", ("s", "SubKey")),
+	("LOAD_DRIVER", "system", ("s", "DriverName")),
+	("ZwOpenProcess", "process", ("ssss", "ProcessHandle", "ProcessName", "PID", "DesiredAccess")),
+	("ZwOpenThread", "threading", ("sss", "ThreadHandle", "TID", "DesiredAccess")),
+	("ZwQuerySystemInformation", "process", ("s", "SystemInformationClass")),
+	("ZwWriteVirtualMemory", "process", ("sssss", "ProcessHandle", "PID", "BaseAddress", "Buffer", "NumberOfBytesToWrite")),
+	("ZwDebugActiveProcess", "process", ("sss", "ProcessHandle", "PID", "DebugHandle")),
+	("ZwCreateProcess", "process", ("ssssss", "ProcessHandle", "PID", "DesiredAccess", "InheritObjectTable", "ParentProcess", "FileName")),
+	("ZwCreateProcessEx", "process", ("ssssss", "ProcessHandle", "PID", "DesiredAccess", "InheritHandles", "InheritFromProcessHandle", "FileName")),
+	("ZwQueueApcThread", "threading", ("ssss", "ThreadHandle", "TID", "PID", "ApcRoutine")),
+	("ZwCreateThread", "threading", ("sssss", "PID", "ThreadHandle", "TID", "CreateSuspended", "DesiredAccess")),
+	("NtMapViewOfSection", "process", ("sssss", "ProcessHandle", "PID", "BaseAddress", "SectionHandle", "Win32Protect")),
+	("ZwSetContextThread", "threading", ("sss", "ThreadHandle", "TID", "PID")),
+	("ZwSystemDebugControl", "process", ("s","Command")),
+	("ZwCreateFile", "filesystem", ("sssssss", "FileHandle", "FileName", "DesiredAccess", "CreateDisposition", "CreateOptions", "FileAttributes", "ShareAccess")),
+	("ZwReadFile", "filesystem", ("ssss", "FileHandle",  "FileHandle", "FileName", "Buffer", "Length")),
+	("ZwWriteFile", "filesystem", ("ssss", "FileHandle", "FileName", "Buffer", "Length")),
+	("ZwDeleteFile", "filesystem", ("s", "FileName")),
+	("ZwSetInformationFile (Delete)", "filesystem", ("sss", "FileHandle", "FileName", "FileInformationClass")),
+	("ZwSetInformationFile (Rename)", "filesystem", ("ssss", "FileHandle", "OriginalName", "Renamed", "FileInformationClass")),
+	("ZwQueryInformationFile", "filesystem", ("ss", "FileHandle", "FileInformationClass")),
+	("ZwCreateMutant", "synchronization", ("ssss", "MutantHandle", "DesiredAccess", "MutexName", "InitialOwner")),
+	("ZwDeviceIoControlFile", "system", ("ss", "FileHandle", "IoControlColde")),
+	("ZwTerminateProcess", "process", ("sss", "ProcessHandle", "PID", "ExitStatus")),
+	("ZwDelayExecution", "system", ("s", "DelayInterval")),
 ]
diff -rupN original/lib/cuckoo/core/database.py new/lib/cuckoo/core/database.py
--- original/lib/cuckoo/core/database.py	2014-01-09 15:47:54.000000000 +0100
+++ new/lib/cuckoo/core/database.py	2014-01-31 21:43:45.192175112 +0100
@@ -271,6 +271,7 @@ class Task(Base):
     target = Column(Text(), nullable=False)
     category = Column(String(255), nullable=False)
     timeout = Column(Integer(), server_default="0", nullable=False)
+    analysis = Column(Integer(), server_default="1", nullable=False)
     priority = Column(Integer(), server_default="1", nullable=False)
     custom = Column(String(255), nullable=True)
     machine = Column(String(255), nullable=True)
@@ -716,6 +717,7 @@ class Database(object):
             timeout=0,
             package="",
             options="",
+            analysis=1,
             priority=1,
             custom="",
             machine="",
@@ -743,6 +745,8 @@ class Database(object):
         # Convert empty strings and None values to a valid int
         if not timeout:
             timeout = 0
+        if not analysis:
+            analysis = 1
         if not priority:
             priority = 1
 
@@ -780,6 +784,7 @@ class Database(object):
         task.timeout = timeout
         task.package = package
         task.options = options
+        task.analysis = analysis
         task.priority = priority
         task.custom = custom
         task.machine = machine
@@ -821,6 +826,7 @@ class Database(object):
                  timeout=0,
                  package="",
                  options="",
+                 analysis=1,
                  priority=1,
                  custom="",
                  machine="",
@@ -849,6 +855,8 @@ class Database(object):
         # Convert empty strings and None values to a valid int
         if not timeout:
             timeout = 0
+        if not analysis:
+            analysis = 1
         if not priority:
             priority = 1
 
@@ -856,6 +864,7 @@ class Database(object):
                         timeout,
                         package,
                         options,
+                        analysis,
                         priority,
                         custom,
                         machine,
@@ -870,6 +879,7 @@ class Database(object):
                 timeout=0,
                 package="",
                 options="",
+                analysis=1,
                 priority=1,
                 custom="",
                 machine="",
@@ -896,6 +906,8 @@ class Database(object):
         # Convert empty strings and None values to a valid int
         if not timeout:
             timeout = 0
+        if not analysis:
+            analysis = 1
         if not priority:
             priority = 1
         
@@ -903,6 +915,7 @@ class Database(object):
                         timeout,
                         package,
                         options,
+                        analysis,
                         priority,
                         custom,
                         machine,
@@ -949,6 +962,7 @@ class Database(object):
                    task.timeout,
                    task.package,
                    task.options,
+                   task.analysis,
                    task.priority,
                    task.custom,
                    task.machine,
diff -rupN original/modules/processing/behavior.py new/modules/processing/behavior.py
--- original/modules/processing/behavior.py	2014-01-09 15:47:55.000000000 +0100
+++ new/modules/processing/behavior.py	2014-01-31 21:43:45.092175113 +0100
@@ -329,6 +329,20 @@ class Summary:
             name = self._check_registry(registry, subkey, handle)
             if name and name not in self.keys:
                 self.keys.append(name)
+        
+        elif call["api"] == ("REGISTRY_OPEN_KEY"):
+            registry = -1
+            subkey = ""
+            handle = 0
+
+            for argument in call["arguments"]:
+                if argument["name"] == "SubKey":
+                    subkey = argument["value"]
+
+            name = self._check_registry(registry, subkey, handle)
+            if name and name not in self.keys:
+                self.keys.append(name)
+
         elif call["api"].startswith("NtOpenKey"):
             registry = -1
             subkey = ""
diff -rupN original/web/submission/views.py new/web/submission/views.py
--- original/web/submission/views.py	2014-01-09 15:47:49.000000000 +0100
+++ new/web/submission/views.py	2014-01-31 21:43:49.655508451 +0100
@@ -26,6 +26,7 @@ def index(request):
         package = request.POST.get("package", "")
         timeout = force_int(request.POST.get("timeout"))
         options = request.POST.get("options", "")
+        analysis = force_int(request.POST.get("analysis"))
         priority = force_int(request.POST.get("priority"))
         machine = request.POST.get("machine", "")
         custom = request.POST.get("custom", "")
@@ -43,6 +44,11 @@ def index(request):
                 options += "&"
             options += "procmemdump=yes"
 
+        if analysis == 2:
+            if options:
+                options += "&"
+            options += "kernel_analysis=yes"    
+
         if "sample" in request.FILES:
             # Preventive checks.
             if request.FILES["sample"].size == 0:
@@ -62,6 +68,7 @@ def index(request):
                                   package=package,
                                   timeout=timeout,
                                   options=options,
+                                  analysis=analysis,
                                   priority=priority,
                                   machine=machine,
                                   custom=custom,
@@ -90,6 +97,7 @@ def index(request):
                                  package=package,
                                  timeout=timeout,
                                  options=options,
+                                 analysis=analysis,
                                  priority=priority,
                                  machine=machine,
                                  custom=custom,
diff -rupN original/web/templates/submission/index.html new/web/templates/submission/index.html
--- original/web/templates/submission/index.html	2014-01-09 15:47:49.000000000 +0100
+++ new/web/templates/submission/index.html	2014-01-31 21:43:48.692175118 +0100
@@ -101,6 +101,15 @@ $(document).ready( function() {
                                 <label for="form_options">Options</label>
                                 <input type="text" class="form-control" id="form_options" name="options" />
                             </div>
+
+                            <div class="form-group">
+                                <label for "form_analysis">Analysis</label>
+                                <select class="form-control" id="form_analysis" name="analysis">
+                                    <option value="1">Userland</option>
+                                    <option value="2">Kernelland</option>
+                                </select>
+                            </div>
+                            
                             <div class="form-group">
                                 <label for="form_priority">Priority</label>
                                 <select class="form-control" id="form_priority" name="priority">
@@ -149,4 +158,4 @@ $(document).ready( function() {
         </form>
     </div>
 </div>
-{% endblock %}
\ No newline at end of file
+{% endblock %}
